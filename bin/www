#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('simpl-demo-2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
  Stream + Chat Socekt
*/
var chat = io.of('/chat');
var video = io.of('/video');
var numUsers = {};
var streamerIds = {};
var thumbnails = {};

chat.on('connection', function (socket) {
  var addedUser = false;

  // when the client emits 'new message', this listens and executes
  socket.on('new message', function (data) {
    // we tell the client to execute 'new message'
    socket.in(socket.room).broadcast.emit('new message', {
      username: socket.username,
      message: data
    });
  });

  // when the client emits 'add user', this listens and executes
  socket.on('add user', function (data) {
    if (addedUser) return;

    // set the room to the current socket
    socket.room = data.room;
    socket.join(socket.room);

    // we store the username in the socket session for this client
    socket.username = data.username;
    if(numUsers[socket.room] == undefined) {
      numUsers[socket.room] = 0;
    }
    ++numUsers[socket.room];
    addedUser = true;
    socket.emit('login', {
      numUsers: numUsers[socket.room]
    });
    // echo globally (all clients) that a person has connected
    socket.in(socket.room).broadcast.emit('user joined', {
      username: socket.username,
      numUsers: numUsers[socket.room]
    });
  });

  // when the client emits 'typing', we broadcast it to others
  socket.on('typing', function () {
    socket.in(socket.room).broadcast.emit('typing', {
      username: socket.username
    });
  });

  // when the client emits 'stop typing', we broadcast it to others
  socket.on('stop typing', function () {
    socket.in(socket.room).broadcast.emit('stop typing', {
      username: socket.username
    });
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    if (addedUser) {
      --numUsers[socket.room];

      // echo globally that this client has left
      socket.in(socket.room).broadcast.emit('user left', {
        username: socket.username,
        numUsers: numUsers[socket.room]
      });
      socket.leave(socket.room);
    }
  });
});

  // client <-> streamer
video.on('connection', function (socket) {
  socket.on('streamer init', function(data) {
    socket.room = data.room;
    streamerIds[socket.room] = socket.id;
    socket.emit('streamer init', {id: socket.id});
  });

  socket.on('remote init', function(data) {
    socket.room = data.room;
    socket.emit('remote init', {id: socket.id});
  });

  socket.on('remote video', function() {
    console.log('request stream: client to streamer.');
    if(streamerIds[socket.room] != undefined) {
      socket.to(streamerIds[socket.room]).emit('streamer video', {remoteId: socket.id});  
    } else {
      console.log(`There's no streamer there.`);
    }
    
  });

  socket.on('streamer video', function(data) {
    console.log('streamer to client with pc.');
    socket.to(data.remoteId).emit('remote video');
  });

  socket.on('streamer desc', function(data) {
    console.log('streamer desc to client.');
    socket.to(data.remoteId).emit('remote desc', {desc: data.desc});
  });

  socket.on('remote desc', function(data) {
    console.log('client desc to streamer.');
    socket.to(streamerIds[socket.room]).emit('streamer desc', {desc: data.desc, remoteId: socket.id});
  });

  socket.on('remote candidate', function(data) {
    console.log('client candidate to streamer.');
    socket.to(streamerIds[socket.room]).emit('streamer candidate', {candidate: data.candidate, remoteId: socket.id});
  });

  socket.on('streamer candidate', function(data) {
    console.log('streamer candidate to client.');
    socket.to(data.remoteId).emit('remote candidate', {candidate: data.candidate});
  });

  // thumbnails for channel list 
  socket.on('streamer thumbnail', function(data) {
    thumbnails[socket.room] = data.imgUrl;    
  });

  socket.on('channel list', function() {
    socket.emit('channel list', {thumbnails: thumbnails});
  });

  socket.on('disconnect', function () {
      if(socket.id === streamerIds[socket.room]) {
        console.log('streamer left the room.');
        delete thumbnails[socket.room];  
      }
  });
});

